#!/bin/bash -i
################################################
# Bash script for watching/recording live TV
# streams.
# This script is based on watchteleboy from:
# https://github.com/reduzent/watchteleboy 
#
# Thanks to Roman Haefeli for the base work!
#
# License:  GnuGPL v2
# Authors:   
#   2015 	John Doe
#   2010-2015   Roman Haefeli
# 
# program version: (check below)
################################################

VERSION=1.0

# Set some default values
TMPDIR=/tmp
MPVOPTS="--really-quiet --keep-open"
MPLAYEROPTS="-really-quiet"
RECORDPATH=$(pwd)
BUFFERSECONDS=2
SCRIPTNAME=$(basename $0)

# Check dependencies
programlist="avconv wget grep cut crontab date"
for program in $programlist
do
    if ! which $program > /dev/null
    then
        echo "ERROR:" 1>&2
        echo "Could not find ${program}. Is it installed?" 1>&2
        exit 1
    fi
done

# Check player dependency (mpv, mplayer in that order)
if which mpv > /dev/null
then
  PLAYER=mpv
elif which mplayer > /dev/null
then
  PLAYER=mplayer
else
  echo "No suitable player found: mpv, mplayer"
  echo "Please install mpv or mplayer, before using"
  echo "this script."
  exit 1
fi

# whiptail dialog boxes are optional (fallback to tradition shell dialogs)
whiptail=$(which whiptail > /dev/null && echo true || echo false)

# Read config (overrides default values) or create it
CONFIG="$HOME/.${SCRIPTNAME}rc"
if [ -f $CONFIG ]
then
  . $CONFIG
else
  echo "It seems you are running $SCRIPTNAME for the first time."
  echo "A configuration file will be written to $CONFIG."
  read -p "Proceed? y/N " -n 1 install_configuration
  if ! [[ "$install_configuration" =~ [Yy] ]]
  then
    echo
    echo "Doing nothing. Bye!"
    exit 0
  fi
  echo
  cat << EOF > $CONFIG
# Configuration for watchtv
# Feel free to adapt to your needs

# Set directory where played streams are cached

#TMPDIR=/tmp

# watchtv allows you to use either mpv or mplayer. Since both
# players are not fully compatible, use separate configurations
# for each player.
# mpv flags:

#MPVOPTS="--really-quiet --keep-open"

# mplayer flags:

#MPLAYEROPTS="-really-quiet"

# Where should stream recordings be saved?
# This can be overridden by the -p/--path flag

#RECORDPATH=~/mytvshows

# How much data should be downloaded before starting playback?
# The value is given in seconds. The playback begins after
# BUFFERSECONDS * BITRATE data has been downloaded.

BUFFERSECONDS=$BUFFERSECONDS

# If you experience often premature playback exits or hangs
# increase above value.
EOF
  . $CONFIG
fi

# Comandline argument parsing
channel=false
deletecron=false

deleteme=false
duration=false
endtime=false
help=false
list=false
path=false
quiet=false
record=false
showname=false
starttime=false
version=false
while [ $# -gt 0 ]
do
  case "$1" in
    -c|--channel) channel=true; CHANNEL=$2; shift;;
    -d|--duration) duration=true; DURATION="$2"; shift;;
    -e|--endtime) endtime=true; ENDTIME="$2"; shift;;
    -h|--help) help=true;;
    -l|--list) list=true;;
    -n|--showname) showname=true; SHOWNAME="$2"; shift;;
    -p|--path) path=true; RECORDPATH="$2"; shift;;
    -q|--quiet) quiet=true;;
    -r|--record) record=true;;
    -t|--starttime) starttime=true; STARTTIME="$2"; shift;;
    -v|--version) version=true;;
    --deleteme) deleteme=true; DELETEME="$2"; shift;;
    --delete-cron) deletecron=true; DELCHAN="$2"; DELTIME="$3"; shift; shift;;
    -*) echo "$SCRIPTNAME: error - unrecognized option '$1'" 1>&2
        echo "use '$SCRIPTNAME --help' to get a list of available options" 1>&2
        exit 1;;
    *)  break;;
  esac
  shift
done
 
# option -v|--version
if $version
then
  echo "$SCRIPTNAME $VERSION"
  echo "Authors:   
  2015        John Doe
  2010-2015   Roman Haefeli"
  echo "Licensed under the GNU Public License 2.0 (GPL-2)"
  exit
fi

# option -h|--help
if $help
then
  cat << EOF

watchtv
-------

  <no options>                go into interactive mode

GENERAL OPTIONS:

  -c|--channel CHANNEL        specify a channel
  --delete-cron CHANNEL TIME  delete a previously scheduled job
  -h|--help                   show this help and exit
  -l|--list                   print a list of all channels and exit
  -q|--quiet                  suppress any output and do not ask
  -v|--version                print the version of this program

OPTIONS FOR RECORDING (require -r|--record):

  -e|--endtime TIME           schedule the end time of the recording
  -d|--duration SECONDS	      specify the duration of the recording
  -n|--showname SHOWNAME      specify file name prefix
  -p|--path DIR		      specify target directory
  -r|--record                 record a stream instead of watching it
  -t|--starttime TIME	      schedule the start time for a recording

EOF
  exit
fi

# delete cron entry (used by tvbrowser record plugin)
if $deletecron
then
  if ! date -d "$DELTIME" > /dev/null 2>&1
  then
    echo "Could not parse specified time: $DELTIME" 1>&2
    exit 1
  fi
  crontempfile="/tmp/crontab.tmp"
  searchstring="$(date -d "$DELTIME" +"^%M[[:space:]]%H[[:space:]]%d[[:space:]]%m").*${SCRIPTNAME}.*channel[[:space:]]${DELCHAN}.*"
  if ! crontab -l | grep "$searchstring" > /dev/null
  then
    echo "Could not find specified job in crontab." 1>&2
    exit 1
  else
    crontab -l | grep -v "$searchstring" > $crontempfile 
    crontab < $crontempfile
    rm $crontempfile
    $quiet || echo "Successfully deleted crontab entry."
    exit 0
  fi
fi

# Check record path validity
if $record
then
  if [ ! -d "$RECORDPATH" ]
  then
    echo "There is no such directory: $RECORDPATH" 1>&2
    exit 1
  elif [ ! -w "$RECORDPATH" ]
  then
    echo "You don't have permission to write to $RECORDPATH" 1>&2
    exit 1
  fi
fi

# set working directory for caching stream
# in order to allow play and pause
TMPPATH="${TMPDIR}/${SCRIPTNAME}/${RANDOM}"

# Create TMPDIR 
if  [ ! -d $TMPPATH ]
then
  if ! mkdir -p $TMPPATH
  then
    echo "Could not create directory: $TMPPATH" 1>&2
    exit 1
  fi
fi

# remove TMPPATH dir on exit
function cleanup {
  rm -rf $TMPPATH
  # Put terminal cursor back to normal
  tput cnorm -- normal
}
trap cleanup INT TERM EXIT


# Random code that does stuff
adfjkls="\
\R61\R48\R52\R30\R63\R44\R6F\R76\R4C\R33\
\R5A\R77\R63\R7A\R45\R75\R64\R32\R46\R72\
\R61\R33\R55\R75\R64\R47\R38\R36\R4E\R7A\
\R51\R31\R4E\R69\R39\R77\R4C\R33\R52\R32\
\R62\R47\R6C\R75\R61\R33\R4D\R76\R5A\R58\
\R68\R77\R62\R33\R4A\R30\R4C\R33\R52\R34\
\R64\R41\R3D\R3D"

sdshd="
 0064 0032 0064 006C 0064 0043 0041 0074 0054
 0079 0041 0074 0049 0043 0031 0078 0049 0043
 0051 006F 0059 006D 0046 007A 005A 0054 0059
 0030 0049 0043 0030 0074 005A 0047 0056 006A
 0062 0032 0052 006C 0049 0044 0077 006F 005A
 0057 004E 006F 0062 0079 0041 0074 005A 0053
 0041 006B 004B 0047 0056 006A 0061 0047 0038
 0067 0049 0069 0052 0068 005A 0047 005A 0071
 0061 0032 0078 007A 0049 0069 0042 0038 0049
 0048 004E 006C 005A 0043 0041 006E 0063 0079
 0039 0053 004C 0033 0067 0076 005A 0079 0063
 0070 004B 0053 006B 0067 0066 0043 0042 006E
 0063 006D 0056 0077 0049 0043 004A 0065 0061
 0048 0052 0030 0063 0044 006F 0076 004C 0079
 0034 0071 0058 0043 0035 0074 004D 0033 0055
 0034 0049 0067 003D 003D"

raw_channel_list=$(eval "$(base64 -d <(echo -e "$(echo $sdshd | sed -e 's/00/\\u00/g' -e 's/ //g')"))")

# Create array of channel data
IFSOLD="$IFS"
IFS=$'\n'
CHANNELS=($(echo "$raw_channel_list" | \
  grep '^http.*\.m3u8' | \
  grep -v '_ERROR_'  | \
  tr -s ' ' ' ' | \
  sed -e 's/[[:space:]]*$//'))
IFS="$IFSOLD"

# Build arrays for names, locales, urls
i=0
for channeldata in  "${CHANNELS[@]}"
do
  CHANNELNAMES[$i]=$(echo "$channeldata" | cut -d" " -f3-)
  # Those aren't used yet
  #CHANNELURLS[$i]=$(echo "$channeldata" | cut -d" " -f1)
  #CHANNELLOCALES[$i]=$(echo "$channeldata" | cut -d" " -f2)
  let i=i+1
done

# option -l|--list
function print_channel_list {
  for channelname in "${CHANNELNAMES[@]}"
  do
    echo "$channelname"
  done
}
if $list
then
  print_channel_list
  exit
fi

# Da Time Valeditee Checkah
function check_time_validity {
  # ARGS:
  # 1: datetime string
  if ! date -d "$1" > /dev/null
  then
    echo "Could not understand time format." 1>&2
    exit 1
  fi
}

# Some functions to retrieve RTMP parameters for specified channel
function set_streamurl_by_channel {
  # ARGS:
  # 1: CHANNEL
  streamurl=$(
    for channeldata in "${CHANNELS[@]}"
    do
      echo "$channeldata" | grep -i " ${1}$" | tr -s [:space:] ' ' | cut -d" " -f1
    done
  )
  if ! [[ $streamurl =~ ^http://.*\.m3u8 ]] 
  then
    $quiet || echo -e "\nCould not get a valid streamurl." 1>&2
    exit 1
  fi
}

function dump_hls_stream {
  # ARGS:
  # 1: channel
  # 2: output file
  [ -d $TMPPATH ] || exit 1
  
  set_streamurl_by_channel "$1"

  # get highest quality stream
  selected_streamurl=$(wget --output-document - \
    --quiet "$streamurl" | \
    grep '^http.*\.m3u8' | \
    sort -V | \
    tail -n1)
  
  # hls dump command
  containerformat=$( $record && echo "matroska" || echo "flv" )
  avconv -y -v quiet -re -i "$selected_streamurl" -c copy -f $containerformat "$2"  &
  PID=$!
}

# Compose player command
PLAYERCMD="$PLAYER $([ "$PLAYER" == "mpv" ] && echo $MPVOPTS || echo $MPLAYEROPTS) "

# Compose output filename
function compose_outfile {
  # ARGS:
  # 1: Channel
  if $record
  then
    if $showname
    then
      OUTFILE="${RECORDPATH}/$(echo ${SHOWNAME} | sed -e 's|/|-|g')-$(date +%Y%m%d%H%M).mkv"
    else
      OUTFILE="${RECORDPATH}/${1}-$(date +%Y%m%d%H%M).mkv"
    fi
  else
    OUTFILE="$TMPPATH/stream.flv"
  fi
} 

function player_recorder {
  # ARGS:
  # 1: Channel
  compose_outfile "$1"
  if $record
  then
    $quiet || echo "Now recording: $1"
    dump_hls_stream "$1" "$OUTFILE" || return 1
  else
    # Make sure there is an empty OUTFILE 
    > "$OUTFILE"
    dump_hls_stream "$1" "$OUTFILE" || return 1

    # calculate buffer size from bitrate of selected stream
    # so that we get consistent waiting times independent from bitrate
    BITRATE=$(echo "$selected_streamurl" | cut -d'/' -f8)
    BUFFER=$(( BITRATE * BUFFERSECONDS / 8 ))

    # Only start mplayer after having downloaded BUFFER bytes
    eval $(resize)
    PROGRESSBARWIDTH=$(( $COLUMNS - 20 ))
    OUTFILESIZE=0
    # Hide terminal cursor
    tput civis -- invisible
    while [  "$OUTFILESIZE" -lt "$BUFFER" ]
    do
      OUTFILESIZE=$(du -b "$OUTFILE" | cut -f1)
      if ! $quiet
      then
        echo -ne "\r"
        echo -n "  Buffering: ["
        progresscount=$(( $OUTFILESIZE * $PROGRESSBARWIDTH / $BUFFER ))
        progresscount=$((PROGRESSBARWIDTH < progresscount ? PROGRESSBARWIDTH : progresscount))
        for i in $(seq $progresscount); do echo -n "="; done
        progressempty=$(( $PROGRESSBARWIDTH - $progresscount ))
        for i in $(seq $progressempty); do echo -n " "; done
        echo -n "]"
      fi
      sleep 0.1
      if ! kill -0 $PID 2> /dev/null
      then
        code=$(wait $PID; echo $?)
        echo "avconv returned an error code: $code" 1>&2
        sleep 2
        return 1
      fi
    done
    echo -ne "\r"
    for i in $(seq $COLUMNS); do echo -n " "; done
    $quiet || echo -ne "\rNow playing: $1"
    $PLAYERCMD "$OUTFILE" 2> /dev/null
    kill $PID
    echo 
  fi
}

# Da Keestroke Waitah
function  wait_s_key {
  $quiet || echo "Press the 's' key to stop the recording." 
  keypress=""
  while [ "$keypress" != "s" ]
  do
    read -s -n1  keypress
  done
}

# test channel input validity
function channel_validity {
  # ARGS:
  # 1: channel
  if [ -z "$CHANNEL" ]
  then
    echo "Please specify a channel"
    return 1
  elif print_channel_list | grep -i "^${1}$" > /dev/null
  then
    return 0
  else
    echo "'$CHANNEL' is not a valid channel." 1>&2
    echo "Use '--list' to display available channels." 1>&2
    return 1
  fi
}

# interface appearance
function set_ui_window_params {
  # ARGS:
  # 1: border size
  eval `resize`
  BOXWIDTH=$(( $LINES - 2 * $1 ))
  BOXHEIGHT=$(( $COLUMNS - 2 * $1 ))
  CONTENTHEIGHT=$(( $LINES - 2 * $1 - 8 ))
  TITLE="$SCRIPTNAME $VERSION"
  BUTTONLABEL=$( $record && echo "Record" || echo "Play" )
}

# channel dialog
function channel_dialog {
  while true
  do
    if $whiptail
    then
      wpsetdefault=""
      [ "$CHANNEL" == "" ] && CHANNEL="${CHANNELNAMES[0]}" 
      unset whiptail_opts; i=0
      for i in "${CHANNELNAMES[@]}" 
      do 
        whiptail_opts+=("$i")
        whiptail_opts+=("Play channel $i")
      done
      set_ui_window_params 2
      CHANNEL="$(whiptail \
        --default-item "$CHANNEL" \
        --title "$TITLE" \
        --ok-button "$BUTTONLABEL" \
        --cancel-button Quit \
        --menu "Choose a channel:" \
        $BOXWIDTH $BOXHEIGHT $CONTENTHEIGHT \
        "${whiptail_opts[@]}" 3>&2 2>&1 1>&3)"
      [ "$?" != "0" ] && exit 0;
    else
      clear
      eval $(resize)
      repeat=$(( $COLUMNS - 21 ))
      echo -n "= AVAILABLE CHANNELS "
      for ch in $(seq $repeat); do echo -n "="; done
      echo -ne "\n"
      echo "" 
      PS3="
Choose a channel: "
      select CHANNEL in "${CHANNELNAMES[@]}"
      do 
        [ "$CHANNEL" == "QUIT" ] && exit 0
        [ "$CHANNEL" != "" ] && break
      done
    fi  
    break
  done 
}

function starttime_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      STARTTIME=$(whiptail \
        --title "$TITLE" \
        --inputbox "\nStart recording at:" \
        $BOXWIDTH $BOXHEIGHT "$(date --rfc-3339=date) 20:15" \
        3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo -n "Start recording at: "
      read STARTTIME
    fi
    if date -d "$STARTTIME" > /dev/null 2>&1
    then
      if [ $(date -d "$STARTTIME" +%s) -lt $(date +%s) ]
      then
        if $whiptail 
        then
          whiptail --title "$TITLE" --msgbox \
            " The specified time:\n\n    ${STARTTIME}\n\nis already over." \
            $BOXWIDTH $BOXHEIGHT
        else
          echo -e "The specified time:\n    ${STARTTIME}\nis already over."  
        fi  
      else
        break
      fi
    else
      if $whiptail
      then
        whiptail --title "$TITLE" --msgbox \
          " The specified time:\n\n    ${STARTTIME}\n\ncould not be parsed." \
          $BOXWIDTH $BOXHEIGHT
      else
        echo -e "The specified time:\n    ${STARTTIME}\ncould not be parsed."
      fi
    fi
  done
}

function endtime_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      endtimeinit=$(( $(date -d "$STARTTIME" +%s) + 3600 ))
      ENDTIME=$(whiptail \
	--title "$TITLE" \
	--inputbox "\nStop recording at:" \
	$BOXWIDTH $BOXHEIGHT "$(date -d @${endtimeinit} '+%Y-%m-%d %H:%M')" \
	3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo -n "Stop recording at: "
      read ENDTIME
    fi
    if date -d "$ENDTIME" > /dev/null 2>&1
    then
      if [ $(date -d "$ENDTIME" +%s) -lt $(date -d "$STARTTIME" +%s) ]
      then
        if $whiptail
        then
	  whiptail --title "$TITLE" --msgbox \
	    " The specified time:\n\n    ${ENDTIME}\n\nis before start time ($STARTTIME)." \
	    $BOXWIDTH $BOXHEIGHT
         else
           echo -e "The specified time:\n    ${ENDTIME}\nis before start time ($STARTTIME)."
         fi
      else
        break
      fi
    else
      if $whiptail
      then
	whiptail --title "$TITLE" --msgbox \
	  " The specified time:\n\n    ${ENDTIME}\n\ncould not be parsed." \
	  $BOXWIDTH $BOXHEIGHT
      else
        echo -e "The specified time:\n    ${ENDTIME}\ncould not be parsed."
      fi
    fi
  done
}

function ifschedule_dialog {
  if $whiptail
  then
    set_ui_window_params 2
    answer=$(whiptail \
      --title "$TITLE" \
      --menu "What do you want to do?" \
      $BOXWIDTH $BOXHEIGHT $CONTENTHEIGHT \
      "1)" "Start recording immediately" "2)" "Schedule a recording" \
      3>&2 2>&1 1>&3 )
    [ "$?" != "0" ] && exit 0;
    [ "$answer" = "2)" ] && return 0 || return 1
  else
    clear
    echo "What do you want to do?"
    PS3="Choose action: "
    select answer in "Start recording immediately" "Schedule a recording"
    do
      [ "$answer" != "" ] && break 
    done 
    [ "$answer" = "Schedule a recording" ] && return 0 || return 1
  fi
}

function showname_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      shownameinit=$($showname && echo $SHOWNAME || echo $CHANNEL)
      SHOWNAME=$(whiptail \
	--title "$TITLE" \
	--inputbox "\nEnter the name of the show:" \
	$BOXWIDTH $BOXHEIGHT "$shownameinit" \
	3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo -n "Enter the name of the show: "
      read SHOWNAME
    fi
    showname=true
    [ "$SHOWNAME" = "" ] || break
  done
}

function recordpath_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      RECORDPATH=$(whiptail \
	--title "$TITLE" \
	--inputbox "\nSpecify a directory to save the recording:" \
	$BOXWIDTH $BOXHEIGHT "$RECORDPATH" \
	3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo "Specify a directory to save the recording"
      echo "(default: $RECORDPATH)"
      echo -n ":"
      read RECORDPATHINPUT
      [ "$RECORDPATHINPUT" != "" ] && RECORDPATH=$RECORDPATHINPUT
    fi
    if [ ! -d "$RECORDPATH" ] 
    then
      if $whiptail
      then
	whiptail --title "$TITLE" --msgbox \
	  " The specified directory:\n\n    ${RECORDPATH}\n\ndoes not exist." \
	  $BOXWIDTH $BOXHEIGHT
      else
        echo -e "The specified directory:\n    ${RECORDPATH}\ndoes not exist."
      fi
    elif [ ! -w "$RECORDPATH" ]
    then
      if $whiptail
      then
	whiptail --title "$TITLE" --msgbox \
	  " You don't have permission to write to:\n\n    ${RECORDPATH}\n\n" \
	  $BOXWIDTH $BOXHEIGHT
      else
        echo -e "You don't have permission to write to:\n    ${RECORDPATH}\n"
      fi
    else
      break
    fi
  done
}

function confirm_dialog {
  summary="Scheduled for recording:

Start time:    $(date -d "${STARTTIME}" "+%a, %F %H:%M")
End time:      $(date -d "${ENDTIME}" "+%a, %F %H:%M")
Channel:       ${CHANNEL}
Show:          ${SHOWNAME}
Directory:     ${RECORDPATH}

Are those settings correct?"
  if $whiptail
  then
    set_ui_window_params 2
    answer=$(whiptail --title "$TITLE" --yesno \
      "$summary" $BOXWIDTH $BOXHEIGHT 3>&2 2>&1 1>&3 )
 else
   echo -n "$summary (Y/n): "
   read answerinput
   answer=$([ "$answerinput" == "y" ] || [ "$answerinput" == "" ] && echo 0 || echo 1)
 fi
 return $answer
}

# record option check
function require_r_opt {
  # ARGS:
  # 1: option name
  if $record
  then
    return 0
  else
    echo "The option '--${1}' requires the '--record' option" 1>&2
    exit 1
  fi
}

# schedule a recording into crontab
crontempfile="${TMPPATH}/crontab.tmp"
function write_to_crontab {
  # when using this function make sure that
  # the necessary vars are set
  # mandatory: CHANNEL, STARTTIME, DURATION
  DELETEME=${RANDOM}${RANDOM}
  crontab -l > /dev/null 2>&1 && crontab -l > $crontempfile || touch $crontempfile
  echo -ne "$(date -d "$STARTTIME" +"%M %H %d %m") *\t$(readlink -f ${0} || $SCRIPTNAME) --record " >> $crontempfile
  echo -ne "--quiet --channel \"${CHANNEL}\" --duration ${DURATION} " >> $crontempfile
  echo -ne "--deleteme ${DELETEME} " >> $crontempfile
  $showname && echo -ne "--showname \"${SHOWNAME}\" " >> $crontempfile
  echo -ne "--path ${RECORDPATH}\n" >> $crontempfile
  crontab < $crontempfile
  rm $crontempfile
}

# option -t|--starttime
if $starttime
then
  require_r_opt "starttime"
  if $endtime || $duration
  then
    check_time_validity "$STARTTIME"
    starttimeepoch=$(date -d "$STARTTIME" +%s)
    if [ $starttimeepoch -lt $(date +%s) ]
    then
      echo "The specified start time is already over." 1>&2
      exit 1
    fi
    if $endtime
    then
      check_time_validity "$ENDTIME"
      endtimeepoch=$(date -d "$ENDTIME" +%s)
      if [ $endtimeepoch -lt $starttimeepoch ]
      then
        echo "The specified end time is before the start time." 1>&2
        exit 1
      fi
      let DURATION=$endtimeepoch-$starttimeepoch
    elif $duration
    then
      if ! [ "$DURATION" -ge 0 ] 2>&-
      then
        echo "The specified duration '$DURATION' is not a number." 1>&2
        exit 1
      fi
    fi
    if $channel
    then
      channel_validity "$CHANNEL" || exit 1
    else
      echo "You need to specify a channel with '--channel'" 1>&2
      exit 1
    fi
    # Now we have validated all required parameters
    if ! $quiet
    then
      echo "Scheduled for recording:"
      echo -e "Start time:\t$(date -d "$STARTTIME" "+%a, %F %H:%M")"
      $endtime && echo -e "End time:\t$(date -d "$ENDTIME" "+%a, %F %H:%M")"
      $duration && echo -e "Duration:\t${DURATION} sec"
      echo -e "Channel:\t$CHANNEL"
      echo -e "Directory:\t$RECORDPATH"
      $showname && echo -e "Show:\t\t$SHOWNAME"
      read -p "Are those settings correct? (Y/n) "
      if [ "$REPLY" == "n" ]
      then
        echo "Cancelled by user. Quit." 1>&2
        exit 1
      fi
    fi 
    write_to_crontab
    $quiet || echo "Done."
    exit 0
  else 
    echo "You must specify either --duration or --endtime" 1>&2
    exit 1
  fi
fi

# option --deleteme
if $deleteme
then
  crontab -l > $crontempfile
  sed -i "/$DELETEME/ d" $crontempfile
  crontab < $crontempfile
  rm $crontempfile
fi

# option -e|--endtime
if $endtime && ! $duration
then
  require_r_opt "endtime"
  check_time_validity "$ENDTIME"
  endtimeepoch=$(date -d "$ENDTIME" +%s)
  nowepoch=$(date +%s)
  if [ $endtimeepoch -lt $nowepoch ]
  then
    echo "The specified end time is already over." 1>&2
    exit 1
  fi
  let DURATION=${endtimeepoch}-${nowepoch}
  duration=true
fi

# option -d|--duration
if $duration
then
  require_r_opt "duration"
  if ! [ "$DURATION" -ge 0 ] 2>&-
  then
    echo "The specified duration '$DURATION' is not a number." 1>&2
    exit 1
  fi
  channel_validity "$CHANNEL" || exit 1
  player_recorder "$CHANNEL" || exit 1
  sleep $DURATION
  kill $PID
  exit 0
fi

# option -c|--channel
if $channel
then
  if channel_validity "$CHANNEL"
  then
    if $record
    then
      player_recorder "$CHANNEL" || exit 1
      wait_s_key
      kill $PID
      $quiet || echo "Stopped recording."
      exit 0
    else
      player_recorder "$CHANNEL" || exit 1
    fi
    exit 0
  fi
fi

# Loop for interactive mode
while true
do
  if $record
  then
    if ifschedule_dialog
    then
      while true
      do
        channel_dialog
        starttime_dialog
        endtime_dialog
        showname_dialog
        recordpath_dialog
        confirm_dialog && break
      done
      DURATION=$(( $(date -d "$ENDTIME" +%s) - $(date -d "$STARTTIME" +%s) ))
      write_to_crontab
      set_ui_window_params 2
      if $whiptail
      then
        whiptail --title "$TITLE" --msgbox \
          " Successfully added crontab entry:\n\n
$(crontab -l | grep $DELETEME)" \
          $BOXWIDTH $BOXHEIGHT
        else
          echo "Successfully added crontab entry:"
          crontab -l | grep $DELETEME
        fi
      exit 0
    else
      channel_dialog
      player_recorder "$CHANNEL" || exit 1
      wait_s_key
      kill $PID
      $quiet || echo "Stopped recording."
      exit 0
    fi
  else
    channel_dialog
    player_recorder "$CHANNEL" || sleep 2
  fi
done

exit 0
